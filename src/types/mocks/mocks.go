// Code generated by MockGen. DO NOT EDIT.
// Source: posterr/src/types (interfaces: Posterr,Users)

// Package mocks is a generated GoMock package.
package mocks

import (
	types "posterr/src/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPosterr is a mock of Posterr interface.
type MockPosterr struct {
	ctrl     *gomock.Controller
	recorder *MockPosterrMockRecorder
}

// MockPosterrMockRecorder is the mock recorder for MockPosterr.
type MockPosterrMockRecorder struct {
	mock *MockPosterr
}

// NewMockPosterr creates a new mock instance.
func NewMockPosterr(ctrl *gomock.Controller) *MockPosterr {
	mock := &MockPosterr{ctrl: ctrl}
	mock.recorder = &MockPosterrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPosterr) EXPECT() *MockPosterrMockRecorder {
	return m.recorder
}

// ListHomePageContent mocks base method.
func (m *MockPosterr) ListHomePageContent(arg0 string, arg1 int, arg2 types.PostsListToggle) ([]types.PosterrContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHomePageContent", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.PosterrContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHomePageContent indicates an expected call of ListHomePageContent.
func (mr *MockPosterrMockRecorder) ListHomePageContent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHomePageContent", reflect.TypeOf((*MockPosterr)(nil).ListHomePageContent), arg0, arg1, arg2)
}

// ListProfileContent mocks base method.
func (m *MockPosterr) ListProfileContent(arg0 string, arg1 int) ([]types.PosterrContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProfileContent", arg0, arg1)
	ret0, _ := ret[0].([]types.PosterrContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProfileContent indicates an expected call of ListProfileContent.
func (mr *MockPosterrMockRecorder) ListProfileContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProfileContent", reflect.TypeOf((*MockPosterr)(nil).ListProfileContent), arg0, arg1)
}

// WriteContent mocks base method.
func (m *MockPosterr) WriteContent(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteContent", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteContent indicates an expected call of WriteContent.
func (mr *MockPosterrMockRecorder) WriteContent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteContent", reflect.TypeOf((*MockPosterr)(nil).WriteContent), arg0, arg1, arg2)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// CountUserFollowers mocks base method.
func (m *MockUsers) CountUserFollowers(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserFollowers", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserFollowers indicates an expected call of CountUserFollowers.
func (mr *MockUsersMockRecorder) CountUserFollowers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserFollowers", reflect.TypeOf((*MockUsers)(nil).CountUserFollowers), arg0)
}

// CountUserFollowing mocks base method.
func (m *MockUsers) CountUserFollowing(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserFollowing", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserFollowing indicates an expected call of CountUserFollowing.
func (mr *MockUsersMockRecorder) CountUserFollowing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserFollowing", reflect.TypeOf((*MockUsers)(nil).CountUserFollowing), arg0)
}

// CountUserPosts mocks base method.
func (m *MockUsers) CountUserPosts(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserPosts", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserPosts indicates an expected call of CountUserPosts.
func (mr *MockUsersMockRecorder) CountUserPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserPosts", reflect.TypeOf((*MockUsers)(nil).CountUserPosts), arg0)
}

// CreateUser mocks base method.
func (m *MockUsers) CreateUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUsersMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsers)(nil).CreateUser), arg0)
}

// FollowUser mocks base method.
func (m *MockUsers) FollowUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowUser indicates an expected call of FollowUser.
func (mr *MockUsersMockRecorder) FollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowUser", reflect.TypeOf((*MockUsers)(nil).FollowUser), arg0, arg1)
}

// GetUserProfile mocks base method.
func (m *MockUsers) GetUserProfile(arg0 string) (types.PosterrUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", arg0)
	ret0, _ := ret[0].(types.PosterrUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUsersMockRecorder) GetUserProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUsers)(nil).GetUserProfile), arg0)
}

// IsFollowingUser mocks base method.
func (m *MockUsers) IsFollowingUser(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowingUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowingUser indicates an expected call of IsFollowingUser.
func (mr *MockUsersMockRecorder) IsFollowingUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowingUser", reflect.TypeOf((*MockUsers)(nil).IsFollowingUser), arg0, arg1)
}

// UnfollowUser mocks base method.
func (m *MockUsers) UnfollowUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfollowUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfollowUser indicates an expected call of UnfollowUser.
func (mr *MockUsersMockRecorder) UnfollowUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfollowUser", reflect.TypeOf((*MockUsers)(nil).UnfollowUser), arg0, arg1)
}
